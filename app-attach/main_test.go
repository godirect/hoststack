// Copyright (c) 2020 Cisco and/or its affiliates.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bytes"
	"encoding/hex"
	"testing"
)

func TestBinaryMarshaler(t *testing.T) {
	Msg := AppSapiMsgAttach{MsgType: ATTACH, Msg: AppAttachMsg{Name: [64]uint8{97, 112, 112, 97, 116, 116, 97, 99, 104}, Options: [18]uint64{98}}}
	encMsg, encErr := Msg.MarshalBinary()
	if encErr != nil {
		t.Errorf("BinaryMarshaling Error %v", encErr)
	}

	expOp := [209]byte{0x01, 0x61, 0x70, 0x70, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00}
	if !bytes.Equal(expOp[:], encMsg) {
		t.Errorf("BinaryMarshaling Output Mismatch. Expected Output:\n%v\n Current Output:\n%v", hex.Dump(expOp[:]), hex.Dump(encMsg))
	}
}

func TestBinaryUnMarshaler(t *testing.T) {
	ip := []byte{0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00}
	var replyMsg AppSapiMsgAttachReply
	decErr := replyMsg.UnmarshalBinary(ip)
	if decErr != nil {
		t.Errorf("BinaryUnMarshaling Error %v", decErr)
	}
	if replyMsg.MsgType != 2 {
		t.Errorf("Expected: replyMsg.Msg_type = 2; Current: replyMsg.Msg_type = %v", replyMsg.MsgType)
	}
	if replyMsg.Msg.AppIndex != 1 {
		t.Errorf("Expected: replyMsg.Msg.AppIndex = 1; Current: replyMsg.Msg.AppIndex = %v", replyMsg.Msg.AppIndex)
	}
	if replyMsg.Msg.AppMq != 320 {
		t.Errorf("Expected: replyMsg.Msg.AppMq = 320; Current: replyMsg.Msg.AppMq = %v", replyMsg.Msg.AppMq)
	}
	if replyMsg.Msg.VppCtrlMq != 320 {
		t.Errorf("Expected: replyMsg.Msg.VppCtrlMq = 320; Current: replyMsg.Msg.VppCtrlMq = %v", replyMsg.Msg.VppCtrlMq)
	}
	if replyMsg.Msg.SegmentHandle != 4294967296 {
		t.Errorf("Expected: replyMsg.Msg.SegmentHandle = 4294967296; Current: replyMsg.Msg.SegmentHandle = %v", replyMsg.Msg.SegmentHandle)
	}
	if replyMsg.Msg.APIClientHandle != 65537 {
		t.Errorf("Expected: replyMsg.Msg.APIClientHandle = 65537; Current: replyMsg.Msg.APIClientHandle = %v", replyMsg.Msg.APIClientHandle)
	}
	if replyMsg.Msg.VppCtrlMqThread != 0 {
		t.Errorf("Expected: replyMsg.Msg.VppCtrlMqThread = 0; Current: replyMsg.Msg.VppCtrlMqThread = %v", replyMsg.Msg.VppCtrlMqThread)
	}
	if replyMsg.Msg.NFds != 2 {
		t.Errorf("Expected: replyMsg.Msg.NFds = 2; Current: replyMsg.Msg.NFds = %v", replyMsg.Msg.NFds)
	}
	if replyMsg.Msg.FdFlags != 3 {
		t.Errorf("Expected: replyMsg.Msg.FdFlags = 3; Current: replyMsg.Msg.FdFlags = %v", replyMsg.Msg.FdFlags)
	}
}
